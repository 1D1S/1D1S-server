extend type Query {
    allChallenges: [ChallengeReturn!]!
    myChallenges: [ChallengeReturn]

    randomChallenges(first: Int = 10): [ChallengeReturn]
    challengesList(
        filter: ChallengeFilterInput,
        first: Int = 10,
        after: String
    ): ChallengeConnection

    challengeById(id: ID!): ChallengeReturn!

    isChallengeLikedByMe(id: ID!): Boolean!
    myChallengeApplicantStatus(id: ID!): ChallengeApplicantStatus
}

input ChallengeFilterInput {
    keyword: String
    job: JobType
    status: ChallengeProgressStatus
    ageGroup: AgeGroup
    duration: DurationRange
}

input DurationRange {
    minDays: Int
    maxDays: Int
}

type ChallengeConnection {
    edges: [ChallengeEdge]
    pageInfo: PageInfo!
}

type ChallengeEdge {
    node: Challenge
    cursor: String!
}

type ChallengeReturn{
    challenge: Challenge
    challengeMe: ChallengeMe
}